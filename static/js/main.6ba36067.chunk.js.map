{"version":3,"sources":["logic/operate.js","components/Calculator.js","logic/calculate.js","App.js","reportWebVitals.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","Error","Calculator","props","state","total","next","clickButton","bind","e","this","setState","obj","buttonName","target","name","match","includes","parseFloat","className","type","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ba36067.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React from 'react';\nimport calculate from '../logic/calculate';\n\nexport default class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      total: 0,\n      next: null,\n      operation: null,\n    };\n    this.clickButton = this.clickButton.bind(this);\n  }\n\n  clickButton(e) {\n    this.setState((state) => calculate(state, e.target.name));\n  }\n\n  render() {\n    const { total, operation, next } = this.state;\n    return (\n      <section className=\"calculator-section\">\n        <p className=\"result\">\n          {total}\n          {operation}\n          {next}\n        </p>\n        <button type=\"button\" name=\"AC\" onClick={this.clickButton}>AC</button>\n        <button type=\"button\" name=\"+/-\" onClick={this.clickButton}>+/-</button>\n        <button type=\"button\" name=\"%\" onClick={this.clickButton}>%</button>\n        <button type=\"button\" className=\"operator\" name=\"รท\" onClick={this.clickButton}>รท</button>\n        <button type=\"button\" name=\"7\" onClick={this.clickButton}>7</button>\n        <button type=\"button\" name=\"8\" onClick={this.clickButton}>8</button>\n        <button type=\"button\" name=\"9\" onClick={this.clickButton}>9</button>\n        <button type=\"button\" className=\"operator\" name=\"x\" onClick={this.clickButton}>x</button>\n        <button type=\"button\" name=\"4\" onClick={this.clickButton}>4</button>\n        <button type=\"button\" name=\"5\" onClick={this.clickButton}>5</button>\n        <button type=\"button\" name=\"6\" onClick={this.clickButton}>6</button>\n        <button type=\"button\" className=\"operator\" name=\"-\" onClick={this.clickButton}>-</button>\n        <button type=\"button\" name=\"1\" onClick={this.clickButton}>1</button>\n        <button type=\"button\" name=\"2\" onClick={this.clickButton}>2</button>\n        <button type=\"button\" name=\"3\" onClick={this.clickButton}>3</button>\n        <button type=\"button\" className=\"operator\" name=\"+\" onClick={this.clickButton}>+</button>\n        <button type=\"button\" className=\"zero\" name=\"0\" onClick={this.clickButton}>0</button>\n        <button type=\"button\" name=\".\" onClick={this.clickButton}>.</button>\n        <button type=\"button\" className=\"operator\" name=\"=\" onClick={this.clickButton}>=</button>\n      </section>\n    );\n  }\n}\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: 0,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport Calculator from './components/Calculator';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then((\n      {\n        getCLS, getFID, getFCP, getLCP, getTTFB,\n      },\n    ) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}